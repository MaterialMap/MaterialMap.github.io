-- ================================
-- СХЕМА БАЗЫ ДАННЫХ ДЛЯ МАТЕРИАЛОВ
-- ================================

-- Основная таблица материалов
create table public.materials (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  units text not null default 'mm–s–tonne–N–MPa',
  
  -- Основные данные материала в JSONB для гибкости
  mat_data jsonb not null,
  eos_data jsonb,
  
  -- Извлечённые ключевые параметры для быстрого поиска
  density numeric generated always as ((mat_data->>'ro')::numeric) stored,
  youngs_modulus numeric generated always as ((mat_data->>'ym')::numeric) stored,
  poisson_ratio numeric generated always as ((mat_data->>'pr')::numeric) stored,
  material_type_code text generated always as (mat_data->>'type') stored,
  
  -- Метаданные
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  
  -- Полнотекстовый поиск
  search_vector tsvector generated always as (
    to_tsvector('english', coalesce(name, '') || ' ' || coalesce(description, ''))
  ) stored
);

-- Справочник типов материалов
create table public.material_types (
  id bigint generated by default as identity primary key,
  name text not null unique,
  description text,
  created_at timestamptz default now()
);

-- Справочник применений
create table public.applications (
  id bigint generated by default as identity primary key,
  name text not null unique,
  description text,
  created_at timestamptz default now()
);

-- Связь материалов и типов (many-to-many)
create table public.material_type_relations (
  material_id bigint references public.materials(id) on delete cascade,
  material_type_id bigint references public.material_types(id) on delete cascade,
  primary key (material_id, material_type_id)
);

-- Связь материалов и применений (many-to-many)
create table public.material_applications (
  material_id bigint references public.materials(id) on delete cascade,
  application_id bigint references public.applications(id) on delete cascade,
  primary key (material_id, application_id)
);

-- Источники и ссылки
create table public.references (
  id bigint generated by default as identity primary key,
  title text not null,
  authors text,
  year integer,
  publication text,
  url text,
  doi text,
  notes text,
  created_at timestamptz default now()
);

-- Связь материалов и источников (many-to-many)
create table public.material_references (
  material_id bigint references public.materials(id) on delete cascade,
  reference_id bigint references public.references(id) on delete cascade,
  primary key (material_id, reference_id)
);

-- Кривые и табличные данные (для сложных материалов)
create table public.material_curves (
  id bigint generated by default as identity primary key,
  material_id bigint references public.materials(id) on delete cascade,
  curve_type text not null, -- 'lcc', 'tension', 'compression', etc.
  curve_id integer not null,
  data_points jsonb not null, -- [{x: 0.0, y: 0.0}, ...]
  metadata jsonb default '{}',
  created_at timestamptz default now()
);

-- ================================
-- ИНДЕКСЫ ДЛЯ ПРОИЗВОДИТЕЛЬНОСТИ
-- ================================

-- Индекс для полнотекстового поиска
create index idx_materials_search on public.materials using gin(search_vector);

-- Индексы для JSONB данных
create index idx_materials_mat_data on public.materials using gin(mat_data);
create index idx_materials_eos_data on public.materials using gin(eos_data);

-- Индексы для численных параметров
create index idx_materials_density on public.materials(density);
create index idx_materials_youngs_modulus on public.materials(youngs_modulus);
create index idx_materials_poisson_ratio on public.materials(poisson_ratio);
create index idx_materials_type_code on public.materials(material_type_code);

-- Составные индексы для комбинированного поиска
create index idx_materials_density_range on public.materials(density, youngs_modulus);

-- Индексы для кривых
create index idx_material_curves_material_id on public.material_curves(material_id);
create index idx_material_curves_type on public.material_curves(curve_type);

-- ================================
-- ТРИГГЕРЫ ДЛЯ UPDATED_AT
-- ================================

-- Функция для обновления updated_at
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Триггер для materials
create trigger handle_materials_updated_at
  before update on public.materials
  for each row execute function public.handle_updated_at();

-- ================================
-- RLS (ROW LEVEL SECURITY)
-- ================================

-- Включаем RLS для всех таблиц
alter table public.materials enable row level security;
alter table public.material_types enable row level security;
alter table public.applications enable row level security;
alter table public.references enable row level security;
alter table public.material_curves enable row level security;

-- Политики доступа (базовые - можно настроить под нужды)
create policy "Materials are viewable by everyone" 
  on public.materials for select 
  using (true);

create policy "Materials are editable by authenticated users" 
  on public.materials for all 
  using (auth.role() = 'authenticated');

-- Аналогичные политики для других таблиц
create policy "Material types are viewable by everyone" 
  on public.material_types for select 
  using (true);

create policy "Applications are viewable by everyone" 
  on public.applications for select 
  using (true);

create policy "References are viewable by everyone" 
  on public.references for select 
  using (true);

-- ================================
-- ВСТАВКА ТЕСТОВЫХ ДАННЫХ
-- ================================

-- Добавляем типы материалов
insert into public.material_types (name, description) values
  ('Ballistic Material', 'Materials used for ballistic testing and simulation'),
  ('Biological Material', 'Bio-inspired or biological materials'),
  ('Composite Material', 'Multi-component materials');

-- Добавляем применения
insert into public.applications (name, description) values
  ('Bird Strike Analysis', 'Analysis of bird impact on aircraft'),
  ('Ballistic Testing', 'Testing of ballistic protection'),
  ('Impact Simulation', 'General impact and crash simulation');

-- Добавляем справку
insert into public.references (title, authors, year, url) values
  ('Birdstrike Analysis on Leading Edge of an Aircraft Wing Using a Smooth Particle Hydrodynamics Bird Model', 
   'Walvekar, V.', 
   2010, 
   'https://www.researchgate.net/publication/267592627_Birdstrike_Analysis_on_Leading_Edge_of_an_Aircraft_Wing_Using_a_Smooth_Particle_Hydrodynamics_Bird_Model');

-- Добавляем материал
insert into public.materials (name, description, units, mat_data, eos_data) values
  ('Ballistic Gelatin for Bird Model', 
   'Ballistic gelatin material for bird strike simulation',
   'mm–s–tonne–N–MPa',
   '{
     "type": "MAT_NULL_TITLE",
     "mid": 1,
     "ro": 1.06e-3,
     "pc": 0.0,
     "mu": 0.0,
     "terod": 0.0,
     "cerod": 0.0,
     "ym": 0.0,
     "pr": 0.0
   }',
   '{
     "type": "EOS_TABULATED_TITLE",
     "eosid": 1,
     "gama": 1.0,
     "e0": 0.0,
     "v0": 1.0,
     "lcc": 1001,
     "curves": {
       "1001": {
         "type": "lcc",
         "sidr": 0,
         "sfa": 1.0,
         "sfo": 1.0,
         "points": [
           {"a1": -0.2327, "o1": 506.7646},
           {"a1": -0.1484, "o1": 101.3529},
           {"a1": -0.1310, "o1": 50.67646},
           {"a1": -0.1258, "o1": 40.54117},
           {"a1": -0.1178, "o1": 30.40588},
           {"a1": -0.1124, "o1": 20.27059},
           {"a1": -0.1044, "o1": 10.13529},
           {"a1": -0.0953, "o1": 2.027059},
           {"a1": 0.0, "o1": 0.0},
           {"a1": 1.0, "o1": -34.47379}
         ]
       }
     }
   }');

-- ================================
-- ПОЛЕЗНЫЕ ФУНКЦИИ И ПРЕДСТАВЛЕНИЯ
-- ================================

-- Представление для полной информации о материале
create view public.materials_full as
select 
  m.id,
  m.name,
  m.description,
  m.units,
  m.mat_data,
  m.eos_data,
  m.density,
  m.youngs_modulus,
  m.poisson_ratio,
  m.material_type_code,
  m.created_at,
  m.updated_at,
  
  -- Агрегированные данные
  array_agg(distinct mt.name) filter (where mt.name is not null) as material_types,
  array_agg(distinct a.name) filter (where a.name is not null) as applications,
  array_agg(distinct r.title) filter (where r.title is not null) as reference_titles
  
from public.materials m
left join public.material_type_relations mtr on m.id = mtr.material_id
left join public.material_types mt on mtr.material_type_id = mt.id
left join public.material_applications ma on m.id = ma.material_id
left join public.applications a on ma.application_id = a.id
left join public.material_references mr on m.id = mr.material_id
left join public.references r on mr.reference_id = r.id
group by m.id, m.name, m.description, m.units, m.mat_data, m.eos_data, 
         m.density, m.youngs_modulus, m.poisson_ratio, m.material_type_code, 
         m.created_at, m.updated_at;

-- Функция для поиска материалов по тексту
create or replace function public.search_materials(search_term text)
returns table(
  id bigint,
  name text,
  description text,
  rank real
) as $
begin
  return query
  select 
    m.id,
    m.name,
    m.description,
    ts_rank(m.search_vector, plainto_tsquery('english', search_term)) as rank
  from public.materials m
  where m.search_vector @@ plainto_tsquery('english', search_term)
  order by rank desc;
end;
$ language plpgsql;

-- Функция для поиска материалов по плотности
create or replace function public.search_materials_by_density(
  min_density numeric default null,
  max_density numeric default null
)
returns table(
  id bigint,
  name text,
  density numeric,
  units text
) as $
begin
  return query
  select 
    m.id,
    m.name,
    m.density,
    m.units
  from public.materials m
  where 
    (min_density is null or m.density >= min_density) and
    (max_density is null or m.density <= max_density)
  order by m.density;
end;
$ language plpgsql;

-- Функция для поиска материалов по диапазону параметров
create or replace function public.search_materials_by_properties(
  min_density numeric default null,
  max_density numeric default null,
  min_youngs_modulus numeric default null,
  max_youngs_modulus numeric default null,
  material_type_filter text default null
)
returns table(
  id bigint,
  name text,
  density numeric,
  youngs_modulus numeric,
  material_type_code text
) as $
begin
  return query
  select 
    m.id,
    m.name,
    m.density,
    m.youngs_modulus,
    m.material_type_code
  from public.materials m
  where 
    (min_density is null or m.density >= min_density) and
    (max_density is null or m.density <= max_density) and
    (min_youngs_modulus is null or m.youngs_modulus >= min_youngs_modulus) and
    (max_youngs_modulus is null or m.youngs_modulus <= max_youngs_modulus) and
    (material_type_filter is null or m.material_type_code = material_type_filter)
  order by m.density, m.youngs_modulus;
end;
$ language plpgsql;